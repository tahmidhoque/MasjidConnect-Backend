// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum ScreenStatus {
  ONLINE
  OFFLINE
  PAIRING
}

enum ScreenOrientation {
  LANDSCAPE
  PORTRAIT
}

enum ContentType {
  VERSE_HADITH
  ANNOUNCEMENT
  EVENT
  CUSTOM
  ASMA_AL_HUSNA
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  masjidId      String
  masjid        Masjid    @relation(fields: [masjidId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Masjid {
  id              String    @id @default(cuid())
  name            String
  latitude        Float
  longitude       Float
  timezone        String
  calculationMethod String   @default("MWL")
  madhab          String    @default("Hanafi")
  prayerTimeSettings String? // Stored as JSON string
  address         String?
  city            String?
  state           String?
  country         String?
  postalCode      String?
  users           User[]
  prayerTimes     PrayerTime[]
  hadiths         Hadith[]
  announcements   Announcement[]
  screens         Screen[]
  contentItems    ContentItem[]
  contentSchedules ContentSchedule[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Mosque {
  id          String   @id @default(cuid())
  name        String
  address     String
  city        String
  state       String
  country     String
  postalCode  String?
  phone       String?
  email       String?
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PrayerTime {
  id              String    @id @default(cuid())
  masjidId        String
  masjid          Masjid    @relation(fields: [masjidId], references: [id])
  date            DateTime
  fajr            String
  sunrise         String?
  zuhr            String
  asr             String
  maghrib         String
  isha            String
  fajrJamaat      String?
  zuhrJamaat      String?
  asrJamaat       String?
  maghribJamaat   String?
  ishaJamaat      String?
  jummahKhutbah   String?
  jummahJamaat    String?
  isManuallySet   Boolean  @default(false)
  source          String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([date, masjidId])
  @@index([date])
}

model Hadith {
  id          String    @id @default(cuid())
  masjidId    String
  masjid      Masjid    @relation(fields: [masjidId], references: [id])
  arabicText  String?
  englishText String?
  displayDate DateTime
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Announcement {
  id          String    @id @default(cuid())
  masjidId    String
  masjid      Masjid    @relation(fields: [masjidId], references: [id])
  message     String
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Screen {
  id          String    @id @default(cuid())
  masjidId    String?
  masjid      Masjid?   @relation(fields: [masjidId], references: [id])
  name        String
  apiKey      String?   @unique
  pairingCode String?   @unique
  pairingCodeExpiry DateTime?
  lastSeen    DateTime?
  status      ScreenStatus @default(OFFLINE)
  deviceType  String?
  location    String?
  orientation ScreenOrientation @default(LANDSCAPE)
  contentConfig Json?
  isActive    Boolean   @default(true)
  scheduleId  String?
  schedule    ContentSchedule? @relation("ScreenSchedule", fields: [scheduleId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  contentOverrides ScreenContentOverride[]

  @@index([pairingCode])
  @@index([status])
}

model ScreenContentOverride {
  id          String    @id @default(cuid())
  screenId    String
  screen      Screen    @relation(fields: [screenId], references: [id])
  contentType String    // e.g., "PRAYER_TIMES", "ANNOUNCEMENTS", "EVENTS"
  enabled     Boolean   @default(true)
  config      Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([screenId, contentType])
}

model ContentItem {
  id          String    @id @default(cuid())
  masjidId    String
  masjid      Masjid    @relation(fields: [masjidId], references: [id])
  type        ContentType
  title       String
  content     Json
  duration    Int       @default(10) // Duration in seconds
  isActive    Boolean   @default(true)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  schedules   ContentScheduleItem[]
}

model ContentSchedule {
  id          String    @id @default(cuid())
  masjidId    String
  masjid      Masjid    @relation(fields: [masjidId], references: [id])
  name        String
  description String?
  isDefault   Boolean   @default(false)
  isActive    Boolean   @default(true)
  items       ContentScheduleItem[]
  screens     Screen[]  @relation("ScreenSchedule")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([masjidId, isDefault])
}

model ContentScheduleItem {
  id              String          @id @default(cuid())
  scheduleId      String
  schedule        ContentSchedule @relation(fields: [scheduleId], references: [id])
  contentItemId   String
  contentItem     ContentItem     @relation(fields: [contentItemId], references: [id])
  order          Int
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@unique([scheduleId, order])
} 